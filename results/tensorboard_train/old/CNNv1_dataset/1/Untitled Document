K = 6  # first convolutional layer output depth
L = 12  # second convolutional layer output depth
M = 24  # third convolutional layer
N = 200  # fully connected layer

W1 = tf.Variable(tf.truncated_normal([5, 5, 1, K], stddev=0.1), name='W1')  # 6x6 patch, 1 input channel, K output channels
B1 = tf.Variable(tf.constant(0.1, tf.float32, [K]), name='B1')
W2 = tf.Variable(tf.truncated_normal([4, 4, K, L], stddev=0.1), name='W2')
B2 = tf.Variable(tf.constant(0.1, tf.float32, [L]), name='B2')
W3 = tf.Variable(tf.truncated_normal([4, 4, L, M], stddev=0.1), name='W3')
B3 = tf.Variable(tf.constant(0.1, tf.float32, [M]), name='B3')

W4 = tf.Variable(tf.truncated_normal([75 * 75 * M, N], stddev=0.1), name='W4') #patrz w zeszycie CNN v1
B4 = tf.Variable(tf.constant(0.1, tf.float32, [N]), name='B4')
W5 = tf.Variable(tf.truncated_normal([N, 4], stddev=0.1), name='W5')
B5 = tf.Variable(tf.constant(0.1, tf.float32, [4]), name='B5')
